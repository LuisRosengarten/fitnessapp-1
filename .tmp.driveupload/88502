{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React from 'react';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar AnimatedInput = Animated.createAnimatedComponent(TextInput);\nexport default function DountChart(_ref) {\n  var _ref$perecentage = _ref.perecentage,\n    perecentage = _ref$perecentage === void 0 ? 1 : _ref$perecentage,\n    _ref$radius = _ref.radius,\n    radius = _ref$radius === void 0 ? 40 : _ref$radius,\n    _ref$strokeWidth = _ref.strokeWidth,\n    strokeWidth = _ref$strokeWidth === void 0 ? 10 : _ref$strokeWidth,\n    _ref$duration = _ref.duration,\n    duration = _ref$duration === void 0 ? 500 : _ref$duration,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'tomato' : _ref$color,\n    _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 0 : _ref$delay,\n    textColor = _ref.textColor,\n    _ref$max = _ref.max,\n    max = _ref$max === void 0 ? 100 : _ref$max,\n    _ref$ext = _ref.ext,\n    ext = _ref$ext === void 0 ? '%' : _ref$ext;\n  var animatedValue = React.useRef(new Animated.Value(0)).current;\n  var circleRef = React.useRef();\n  var inputRef = React.useRef();\n  var halfCirlce = radius + strokeWidth;\n  var circleCircumference = 2 * Math.PI * radius;\n  var animation = function animation(toValue) {\n    return Animated.timing(animatedValue, {\n      toValue: toValue,\n      duration: duration,\n      delay: delay,\n      useNativeDriver: true\n    }).start();\n  };\n  React.useEffect(function () {\n    animation(perecentage);\n    animatedValue.addListener(function (v) {\n      if (circleRef != null && circleRef.current) {\n        var maxPerc = 100 * v.value / max;\n        var strokeDashoffset = circleCircumference - circleCircumference * maxPerc / 100;\n        circleRef.current.setNativeProps({\n          strokeDashoffset: strokeDashoffset\n        });\n      }\n      if (inputRef != null && inputRef.current) {\n        inputRef.current.setNativeProps({\n          text: perecentage + \" \" + ext\n        });\n      }\n    });\n    return function () {\n      animatedValue.removeAllListeners();\n    };\n  });\n  return _jsxs(View, {\n    children: [_jsx(Svg, {\n      width: radius * 2,\n      height: radius * 2,\n      viewBox: \"0 0 \" + halfCirlce * 2 + \" \" + halfCirlce * 2,\n      children: _jsxs(G, {\n        rotation: -90,\n        origin: halfCirlce + \", \" + halfCirlce,\n        children: [_jsx(Circle, {\n          cx: \"50%\",\n          cy: \"50%\",\n          stroke: color,\n          strokeWidth: strokeWidth,\n          r: radius,\n          strokeOpacity: 0.2,\n          fill: \"transparent\"\n        }), _jsx(AnimatedCircle, {\n          ref: circleRef,\n          cx: \"50%\",\n          cy: \"50%\",\n          stroke: color,\n          strokeWidth: strokeWidth,\n          r: radius,\n          strokeDasharray: circleCircumference,\n          strokeDashoffset: circleCircumference,\n          strokeLinecap: \"round\"\n        })]\n      })\n    }), _jsx(AnimatedInput, {\n      ref: inputRef,\n      underlineColorAndroid: \"transparent\",\n      editable: false,\n      defaultValue: \"0\",\n      style: [StyleSheet.absoluteFillObject, {\n        fontSize: radius / 2.5,\n        color: textColor != null ? textColor : color\n      }, {\n        fontWeight: '900',\n        textAlign: 'center',\n        width: halfCirlce * 1.6\n      }]\n    })]\n  });\n}","map":{"version":3,"names":["React","Svg","G","Circle","AnimatedCircle","Animated","createAnimatedComponent","AnimatedInput","TextInput","DountChart","perecentage","radius","strokeWidth","duration","color","delay","textColor","max","ext","animatedValue","useRef","Value","current","circleRef","inputRef","halfCirlce","circleCircumference","Math","PI","animation","toValue","timing","useNativeDriver","start","useEffect","addListener","v","maxPerc","value","strokeDashoffset","setNativeProps","text","removeAllListeners","StyleSheet","absoluteFillObject","fontSize","fontWeight","textAlign","width"],"sources":["/Users/luisrosengarten/Documents/CODEN/apps/fitnessapp/components/DountChart.js"],"sourcesContent":["import { View, Text, Animated, TextInput, StyleSheet } from 'react-native'\nimport React from 'react'\nimport Svg, {G, Circle} from 'react-native-svg'\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle)\nconst AnimatedInput = Animated.createAnimatedComponent(TextInput)\n\nexport default function DountChart({\n    perecentage = 1,\n    radius = 40,\n    strokeWidth = 10,\n    duration = 500,\n    color = 'tomato',\n    delay = 0,\n    textColor,\n    max = 100,\n    ext = '%'\n}) {\n\n    const animatedValue = React.useRef(new Animated.Value(0)).current\n    const circleRef = React.useRef()\n    const inputRef = React.useRef()\n\n    const halfCirlce = radius + strokeWidth\n    const circleCircumference = 2 * Math.PI * radius\n\n    const animation = (toValue) => {\n        return Animated.timing(animatedValue, {toValue, duration, delay, useNativeDriver: true})\n        .start()\n    }\n\n    React.useEffect(() => {\n        animation(perecentage)\n        animatedValue.addListener(v => {\n            if (circleRef?.current) {\n\n                const maxPerc = 100 * v.value / max\n                const strokeDashoffset = circleCircumference - (circleCircumference * maxPerc) / 100\n                circleRef.current.setNativeProps({\n                    strokeDashoffset\n                })\n            }\n\n            if (inputRef?.current) {\n                inputRef.current.setNativeProps({\n                    text: `${perecentage} ${ext}`\n                })\n            }\n        })\n\n        return () => {\n            animatedValue.removeAllListeners()\n        }\n    })\n\n  return (\n    <View>\n      <Svg \n        width={radius * 2}\n        height={radius * 2}\n        viewBox={`0 0 ${halfCirlce * 2} ${halfCirlce * 2}`}\n      >\n        <G rotation={-90} origin={`${halfCirlce}, ${halfCirlce}`}>\n            <Circle \n                cx='50%'\n                cy='50%'\n                stroke={color}\n                strokeWidth={strokeWidth}\n                r={radius}\n                strokeOpacity={0.2}\n                fill='transparent'\n            />\n            <AnimatedCircle\n                ref={circleRef} \n                cx='50%'\n                cy='50%'\n                stroke={color}\n                strokeWidth={strokeWidth}\n                r={radius}\n                strokeDasharray={circleCircumference}\n                strokeDashoffset={circleCircumference}\n                strokeLinecap='round'\n            />\n        </G>\n      </Svg>\n      <AnimatedInput \n        ref={inputRef}\n        underlineColorAndroid='transparent'\n        editable={false}\n        defaultValue='0'\n        style={[\n            StyleSheet.absoluteFillObject,\n            { fontSize: radius / 2.5, color: textColor ?? color },\n            { fontWeight: '900', textAlign: 'center', width: halfCirlce * 1.6 }\n        ]}\n      />\n    </View>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}